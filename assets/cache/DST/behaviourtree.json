{"id":"behaviourtree","deps":["class"],"as":{},"info":"","extern":[{"id":"BT","info":"\n\nBT = inst, root\n\nbehaviour tree\n\n"},{"id":"BT-ForceUpdate","info":"\n\n() => ()\n\n"},{"id":"BT-Update","info":"\n\n() => ()\n\nforceupdate will set false\n\n"},{"id":"BT-Reset","info":""},{"id":"BT-Stop","info":""},{"id":"BT-GetSleepTime","info":""},{"id":"BehaviourNode","info":"\n\nBehaviourNode = name: string, children: [ @BehaviourNode ]\n\nBehaviourNode:\n\n- name\n- children\n- status: @Enum, 即 @global-status\n- lastresult: @Enum 与 status 形同\n- parent: @BehaviourNode\n\n"},{"id":"BehaviourNode-DoToParents","info":"\n\nfn => ()\n\n- fn: node: @BehaviourNode => ()\n\n对所有的 parents 执行 fn\n\n"},{"id":"BehaviourNode-Sleep","info":"\n\nt => ()\n\n实际上是修改更新的时间 nextupdatetime\n\n"},{"id":"BehaviourNode-GetSleepTime","info":"\n\n() => ()\n\nrunning 状态, 无子节点, 不是 @ConditionNode 才有 sleep time\n\n"},{"id":"BehaviourNode-GetTreeSleepTime","info":"\n\n() => ()\n\n实际上就是计算最底层所有子节点中最大的 sleep time\n\n"},{"id":"BehaviourNode-Visit","info":"\n\n() => ()\n\n将当前节点 status 设为 FAILED\n\n"},{"id":"BehaviourNode-SaveStatus","info":"\n\n() => ()\n\n将自己和所有子节点的状态保留进入 lastresult\n\n"},{"id":"BehaviourNode-Step","info":"\n\n() => ()\n\n"},{"id":"BehaviourNode-Reset","info":"\n\n将当前节点和所有子节点设置为 READY\n\n"}],"local":[{"id":"profilewrapvisit","info":"\n\nnode: @BehaviourNode => ()\n\ndecorate 所有 node 的 @BehaviourNode-Visit\n\n"},{"id":"global-status","info":"\n\n```lua\nSUCCESS = \"SUCCESS\"\nFAILED = \"FAILED\"\nREADY = \"READY\"\nRUNNING = \"RUNNING\"\n```\n\n全局变量\n\n"}]}